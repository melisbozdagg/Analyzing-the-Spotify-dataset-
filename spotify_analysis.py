# -*- coding: utf-8 -*-
"""Spotify_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Nj2C6j5UscamHaO5jjXkrqg0cW-OkBw
"""

import pandas as pd
import plotly.express as px   #importing plotly
from scipy.stats import pearsonr 
import plotly.graph_objects as go

"""▶ **Pre-processing the data**"""

data = pd.read_csv("/content/drive/MyDrive/spotify/tracks.csv")
data_artist = pd.read_csv("/content/drive/MyDrive/spotify/artists.csv")
data
data_artist

data.info()

# missing data  
data.isnull().sum()

# summary
data.describe().transpose()

"""✔  we should change the release_date to a date type and then put months and years into separate columns."""

data[["year", "month", "day"]] = data["release_date"].str.split("-", expand = True)
data[["year", "month", "day"]]

"""
✅ **What are the most popular songs right now?**"""

most_popular = data.query('popularity>90', inplace=False).sort_values('popularity', ascending=False)
most_popular[:10]

"""✔ Sort the filtered values and show the columns of interest"""

pop_date = most_popular.sort_values('release_date', ascending=False)
pop_date[['name', 'popularity', 'explicit','release_date']][:20]

"""☹ March 2020 the world went under a complete lockdown because of the Covid-19.  
✔ We try to know songs that released in March 2020 and their popularity
"""

most_popular_march_20 = data.query('(popularity > 80) and (year in ["2020"]) and (month in ["03"])')
most_popular_march_20[['id', 'name', 'explicit','popularity','year','month']][:20]

"""✅**How do different features of a song impact its popularity?**"""

data1=data.groupby('popularity')['danceability'].mean().sort_values(ascending=[False]).reset_index()
data1.head()

"""✔ This dataframe will have the popularity for different songs grouped by the mean of the danceability score."""

fig1 = px.scatter(data1, x="popularity", y="danceability", color="danceability",size='popularity')
fig1.show()

"""✔ We release that 'popularity' and 'danceability' are positively correlated, which implies that, as the popularity of the song increase, the danceability score for that song also increases.

✅ Calculate Pearson's Correlation Constant 'r' for two different features.
The following are the three conditions for the Pearson's Correlation Coefficient 'r':-
r>0, implies, positive correlation
r=0, implies, no correlation
r<0, implies, negative correlation.
"""

data_1 = data1['popularity']
data_2 = data1['danceability']

# calculate Pearson's correlation
corr, _ = pearsonr(data_1, data_2)
print('Pearsons correlation: %.3f' % corr)

matrix=data.corr()  #returns a matrix with correlation of all features
x_list=['popularity','duration_ms','explicit',
        'danceability','energy','key','loudness',
        'mode','speechiness','acousticness','instrumentalness',
        'liveness','valence','tempo','time_signature']

fig_heatmap = go.Figure(data=go.Heatmap(
                   z=matrix,
                   x=x_list,
                   y=x_list,
                   hoverongaps = False))
fig_heatmap.update_layout(margin = dict(t=200,r=200,b=200,l=200),
    width = 800, height = 650,
    autosize = False )

fig_heatmap.show()

"""✅  We observe that there is no significant positive correlation between popularity and a song's feature. The most positive correlation occurs between popularity, danceability, loudness, and energy.

✅**MOST POPULAR ARTIST**
"""

artists_popular = data_artist.sort_values(by=['popularity'], ascending=False).reset_index()
artists_popular[:10]

"""▶ **Analyzing the Genres**"""

data_artist[data_artist["genres"]=='[]']
df_genre=data_artist[data_artist["genres"]!='[]']
df_genre.head()

"""▶ We observe that the column 'genres' has a list passed as value. Let's split these lists into individual values."""

df_sort_genres=pd.DataFrame(df_genre.assign(genres=df_genre.genres.str.split(",")).explode('genres'))
df_sort_genres.tail()

df_sort_genres['genres']=df_sort_genres.genres.str.replace('[',' ')
df_sort_genres['genres']=df_sort_genres.genres.str.replace(']',' ')

# get top 30 most commom genres
n = 30
top_30=pd.DataFrame(df_sort_genres['genres'].value_counts()[:n]).reset_index()
top_30.rename(columns = {'index':'Genres','genres':'Total_Count'}, inplace = True)
top_30

fig3 = px.pie(top_30, values='Total_Count', names='Genres')
fig3.show()